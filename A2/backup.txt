"""CSC343 Assignment 2

=== CSC343 Winter 2023 ===
Department of Computer Science,
University of Toronto

This code is provided solely for the personal and private use of
students taking the CSC343 course at the University of Toronto.
Copying for purposes other than this use is expressly prohibited.
All forms of distribution of this code, whether as given or with
any changes, are expressly prohibited.

Authors: Danny Heap, Marina Tawfik, and Jacqueline Smith

All of the files in this directory and all subdirectories are:
Copyright (c) 2023 Danny Heap and Jacqueline Smith

=== Module Description ===

This file contains the WasteWrangler class and some simple testing functions.
"""

import datetime as dt
import psycopg2 as pg
import psycopg2.extensions as pg_ext
import psycopg2.extras as pg_extras
from typing import Optional, TextIO

def get_eID_from_employee_name(employees, name):
    return next((item[0] for item in employees if item[1] == name), None)

def get_table(connection, table_name):
    all_entries = list()
    with connection.cursor() as curs:
        curs.execute("SELECT * FROM %s" % (table_name))
        all_entries = [tuple(employee) for employee in curs]
    
    return all_entries

class WasteWrangler:
    """A class that can work with data conforming to the schema in
    waste_wrangler_schema.ddl.

    === Instance Attributes ===
    connection: connection to a PostgreSQL database of a waste management
    service.

    Representation invariants:
    - The database to which connection is established conforms to the schema
      in waste_wrangler_schema.ddl.
    """
    connection: Optional[pg_ext.connection]

    def __init__(self) -> None:
        """Initialize this WasteWrangler instance, with no database connection
        yet.
        """
        self.connection = None

    def connect(self, dbname: str, username: str, password: str) -> bool:
        """Establish a connection to the database <dbname> using the
        username <username> and password <password>, and assign it to the
        instance attribute <connection>. In addition, set the search path
        to waste_wrangler.

        Return True if the connection was made successfully, False otherwise.
        I.e., do NOT throw an error if making the connection fails.

        >>> ww = WasteWrangler()
        >>> ww.connect("csc343h-marinat", "marinat", "")
        True
        >>> # In this example, the connection cannot be made.
        >>> ww.connect("invalid", "nonsense", "incorrect")
        False
        """
        try:
            self.connection = pg.connect(
                dbname=dbname, user=username, password=password,
                options="-c search_path=waste_wrangler",
                cursor_factory=pg_extras.DictCursor
            )
            return True
        except pg.Error:
            return False

    def disconnect(self) -> bool:
        """Close this WasteWrangler's connection to the database.

        Return True if closing the connection was successful, False otherwise.
        I.e., do NOT throw an error if closing the connection failed.

        >>> ww = WasteWrangler()
        >>> ww.connect("csc343h-marinat", "marinat", "")
        True
        >>> ww.disconnect()
        True
        """
        try:
            if self.connection and not self.connection.closed:
                self.connection.close()
            return True
        except pg.Error:
            return False

    def schedule_trip(self, rid: int, time: dt.datetime) -> bool:
        """Schedule a truck and two employees to the route identified
        with <rid> at the given time stamp <time> to pick up an
        unknown volume of waste, and deliver it to the appropriate facility.

        The employees and truck selected for this trip must be available:
            * They can NOT be scheduled for a different trip from 30 minutes
              of the expected start until 30 minutes after the end time of this
              trip.
            * The truck can NOT be scheduled for maintenance on the same day.

        The end time of a trip can be computed by assuming that all trucks
        travel at an average of 5 kph.

        From the available trucks, pick a truck that can carry the same
        waste type as <rid> and give priority based on larger capacity and
        use the ascending order of ids to break ties.

        From the available employees, give preference based on hireDate
        (employees who have the most experience get priority), and order by
        ascending order of ids in case of ties, such that at least one
        employee can drive the truck type of the selected truck.

        Pick a facility that has the same waste type a <rid> and select the one
        with the lowest fID.

        Return True iff a trip has been scheduled successfully for the given
            route.
        This method should NOT throw an error i.e. if scheduling fails, the
        method should simply return False.

        No changes should be made to the database if scheduling the trip fails.

        While a realistic use case will provide a <time> in the near future, our
        tests could use any valid value for <time>.
        """
        try:
            # Check if rid is an invalid route ID.
            route_details = None
            with self.connection.cursor() as curs:
                curs.execute("SELECT * FROM Route WHERE rID=%s" % (rid))
                route_details = curs.fetchone()
            if route_details is None: return False
            selected_rID, waste_type, length = route_details
            
            # check if route has already been scheduled for today
            is_route_scheduled_today = False
            with self.connection.cursor() as curs:
                curs.execute("SELECT rID FROM Trip WHERE rID=%s AND DATE(tTIME)='%s'" % (selected_rID, time.date()))
                is_route_scheduled_today = curs.fetchone() is not None
            if is_route_scheduled_today: return False

            thirty_minutes = dt.timedelta(minutes=30)
            lower_limit = time-thirty_minutes
            trip_time=int((length/5)*3600)
            trip_time=dt.timedelta(seconds=trip_time)
            upper_limit = time+trip_time+thirty_minutes

            available_pairs = list()
            second_drivers = list()
            facilities = list()
            with self.connection.cursor() as curs:
                curs.execute("CREATE VIEW MaintainedTrucks AS SELECT tID FROM Maintenance GROUP BY tID HAVING '%s'-max(mDATE)<=100" % (time.date()))
                curs.execute("CREATE VIEW CandidateTrucks AS SELECT truckType, tID, capacity FROM Truck NATURAL JOIN TruckType NATURAL JOIN MaintainedTrucks WHERE wasteType='%s'" % (waste_type))
                curs.execute("CREATE VIEW TrucksDoingTrips AS SELECT CT.truckType, CT.tID, CT.capacity FROM Trip T NATURAL JOIN CandidateTrucks CT WHERE T.tTIME>='%s' AND T.tTIME<='%s'" % (lower_limit, upper_limit))
                curs.execute("CREATE VIEW SameDayMaintenance AS SELECT CT.truckType, CT.tID, CT.capacity FROM Maintenance M NATURAL JOIN CandidateTrucks CT WHERE M.mDATE='%s'" % (time.date()))
                curs.execute("CREATE VIEW AvailableTrucks AS ((SELECT * FROM CandidateTrucks) EXCEPT (SELECT * FROM TrucksDoingTrips)) EXCEPT (SELECT * FROM SameDayMaintenance)")

                curs.execute("CREATE VIEW AllSameTruckTypeDrivers AS SELECT E.eID, E.hireDate, AT.truckType, AT.tID, AT.capacity FROM Driver NATURAL JOIN AvailableTrucks AT NATURAL JOIN Employee E WHERE '%s'>=E.hireDate" % (time.date()))
                curs.execute("CREATE VIEW SameTruckTypeDriversDoingTrips AS SELECT CD.eID FROM Trip T, AllSameTruckTypeDrivers CD WHERE T.tTIME>='%s' AND T.tTIME<='%s' AND (T.eID1=CD.eID OR T.eID2=CD.eID)" % (lower_limit, upper_limit))
                curs.execute("CREATE VIEW AvailableDrivers AS (SELECT eID FROM AllSameTruckTypeDrivers) EXCEPT (SELECT * FROM SameTruckTypeDriversDoingTrips)")
                curs.execute("CREATE VIEW TruckDriverPair AS SELECT tID, eID FROM AvailableDrivers NATURAL JOIN AllSameTruckTypeDrivers ORDER BY capacity desc, tID asc, hireDate asc, eID asc")
                
                curs.execute("SELECT * FROM TruckDriverPair")
                available_pairs = list([tuple(data) for data in curs])
                if len(available_pairs)==0: return False
                selected_tID, selected_eID1 = available_pairs[0]

                curs.execute("CREATE VIEW DriversDoingTrips AS SELECT D.eID FROM Trip T, Driver D WHERE T.tTIME>='%s' AND T.tTIME<='%s' AND (T.eID1=D.eID OR T.eID2=D.eID)" % (lower_limit, upper_limit))
                curs.execute("CREATE VIEW FreeDrivers AS ((SELECT eID FROM Driver) EXCEPT (SELECT * FROM DriversDoingTrips))")

                curs.execute("SELECT eID FROM FreeDrivers NATURAL JOIN Employee WHERE eID!=%s AND '%s'>=hireDate ORDER BY hireDate asc, eID asc" % (selected_eID1, time.date()))
                second_drivers = list([tuple(data) for data in curs])
                if len(second_drivers)==0: return False
                selected_eID2 = second_drivers[0][0]

                curs.execute("SELECT fID FROM Facility WHERE wasteType='%s' ORDER BY fID asc" % (waste_type))
                facilities = list([tuple(data) for data in curs])
                if len(facilities)==0: return False
                select_fID = facilities[0][0]

                trip_tuple = None
                if(selected_eID1 >= selected_eID2): trip_tuple = tuple([selected_rID, selected_tID, time, "NULL", selected_eID1, selected_eID2, select_fID])
                else: trip_tuple = tuple([selected_rID, selected_tID, time, "NULL", selected_eID2, selected_eID1, select_fID])
                curs.execute("INSERT INTO Trip VALUES (%s, %s, '%s', %s, %s, %s, %s)" % trip_tuple)

                # curs.execute("SELECT * FROM Trip")
                # for data in curs:
                #     print(data)

                return True
                
        except pg.Error as ex:
            raise ex
            return False

    def schedule_trips(self, tid: int, date: dt.date) -> int:
        """Schedule the truck identified with <tid> for trips on <date> using
        the following approach:

            1. Find routes not already scheduled for <date>, for which <tid>
               is able to carry the waste type. Schedule these by ascending
               order of rIDs.

            2. Give preference based on hireDate (employees who have the most
               experience get priority), and break ties by choosing
               the lower eID, such that at least one employee can
               drive the truck type of <tid>.

               The facility for the trip is the one with the lowest fID that can
               handle the waste type of the route.

               The volume for the scheduled trip should be null.

            3. Continue scheduling, making sure to leave 30 minutes between
               the end of one trip and the start of the next, using the
               assumption that <tid> will travel an average of 5 kph.
               Make sure that the last trip will not end after 4 p.m.

        Return the number of trips that were scheduled successfully.

        Your method should NOT raise an error.

        While a realistic use case will provide a <date> in the near future, our
        tests could use any valid value for <date>.
        """
        # TODO: implement this method
        try:
            # Get all routes that don't have a trip on given date
            first_drivers = list()
            second_drivers = list()
            routes_to_schedule = list()
            with self.connection.cursor() as curs:
                curs.execute("CREATE VIEW EmptyRoutes AS (SELECT rID FROM Route) EXCEPT (SELECT rID FROM Trip WHERE DATE(tTIME)='%s')" % (date))
                curs.execute("CREATE VIEW RoutesToSchedule AS SELECT rID FROM EmptyRoutes NATURAL JOIN Route NATURAL JOIN TruckType NATURAL JOIN Truck WHERE tID=%s ORDER BY rID asc" % (tid))
                curs.execute("SELECT * FROM RoutesToSchedule")
                routes_to_schedule = curs.fetchall()
                if len(routes_to_schedule)==0: return 0

            start_time=dt.datetime(date.year, date.month, date.day, 8, 0, 0, 0)
            end_time=None
            max_time=dt.datetime(date.year, date.month, date.day, 16, 0, 0, 0)
            for index, rID in enumerate(routes_to_schedule):
                selected_rID=rID[0]
                if end_time is None: selected_time=start_time
                else: selected_time=end_time+dt.timedelta(minutes=30)

                route_length=None
                with self.connection.cursor() as curs:
                    curs.execute("SELECT length FROM Route WHERE rID=%s" % (selected_rID))
                    route_length = curs.fetchall()[0][0]
                trip_time=int((route_length/5)*3600)
                trip_time=dt.timedelta(seconds=trip_time)
                end_time=start_time+trip_time
                if(end_time>max_time): return index
                
                selected_tID=tid
                selected_eID1=None
                selected_eID2=None
                selected_fID=None
                with self.connection.cursor() as curs:
                    curs.execute("CREATE VIEW ValidTruckTypeDrivers AS SELECT eID FROM Truck NATURAL JOIN Driver NATURAL JOIN Employee WHERE tID=%s AND %s>=hireDate", (selected_tID, date))
                    curs.execute("CREATE VIEW BusyDriverPairs AS SELECT eID1, eID2 FROM Trip WHERE DATE(tTIME)='%s'" % (date))
                    curs.execute("CREATE VIEW BusyDrivers AS (SELECT eID1 FROM BusyDriverPairs) UNION (SELECT eID2 FROM BusyDriverPairs)")
                    curs.execute("CREATE VIEW FirstDrivers AS (SELECT * FROM ValidTruckTypeDrivers) EXCEPT (SELECT * FROM BusyDrivers)")
                    curs.execute("SELECT * FROM FirstDrivers NATURAL JOIN EMPLOYEE ORDER BY hireDate asc, eID asc")
                    first_drivers = curs.fetchall()
                    if len(first_drivers)==0: return index
                    selected_eID1 = first_drivers[0][0]

                    curs.execute("CREATE VIEW SecondDrivers AS (SELECT eID FROM Driver WHERE eID!=%s) EXCEPT (SELECT * FROM BusyDrivers)" % (selected_eID1))
                    curs.execute("SELECT * FROM SecondDrivers NATURAL JOIN EMPLOYEE ORDER BY hireDate asc, eID asc")
                    second_drivers = curs.fetchall()
                    if len(second_drivers)==0: return index
                    selected_eID2 = second_drivers[0][0]

                    curs.execute("SELECT fID FROM RoutesToSchedule NATURAL JOIN Route NATURAL JOIN Facility ORDER BY fID asc")
                    facilities = curs.fetchall()
                    if len(facilities)==0: return False
                    selected_fID = facilities[0][0]

                    trip_tuple = None
                    if(selected_eID1 >= selected_eID2): trip_tuple = tuple([selected_rID, selected_tID, selected_time, "NULL", selected_eID1, selected_eID2, selected_fID])
                    else: trip_tuple = tuple([selected_rID, selected_tID, selected_time, "NULL", selected_eID2, selected_eID1, selected_fID])
                    curs.execute("INSERT INTO Trip VALUES (%s, %s, '%s', %s, %s, %s, %s)" % trip_tuple)

                    curs.execute("DROP VIEW SecondDrivers")
                    curs.execute("DROP VIEW FirstDrivers")
                    curs.execute("DROP VIEW BusyDrivers")
                    curs.execute("DROP VIEW BusyDriverPairs")
                    curs.execute("DROP VIEW ValidTruckTypeDrivers")

            return 0

        except pg.Error as ex:
            raise ex
            return False

    def update_technicians(self, qualifications_file: TextIO) -> int:
        try:
            data= self._read_qualifications_file(qualifications_file)
            data= [tuple([e[0]+' '+e[1], e[2]]) for e in data]
            data= list(set(data))
            
            # Check if name of employee exists in table Employee.
            all_employees = get_table(self.connection, "Employee")
            all_employee_names = [e[1] for e in all_employees]
            data = list(filter(lambda e: e[0] in all_employee_names , data))
            data = [tuple([get_eID_from_employee_name(all_employees, e[0]), e[1]]) for e in data]

            # Check if the truckType is exists or not.
            all_truckTypes = get_table(self.connection, "TruckType")
            all_truckTypes = list(set([t[0] for t in all_truckTypes]))
            data = list(filter(lambda e: e[1] in all_truckTypes , data))

            # Check if the technician is already recorded to work on the corresponding truck type.
            all_technicians = get_table(self.connection, "Technician")
            data = list(filter(lambda e: e not in all_technicians , data))

            # Check if the employee is not a driver.
            all_drivers = get_table(self.connection, "Driver")
            all_drivers = list(set([e[0] for e in all_drivers]))
            data = list(filter(lambda e: e[0] not in all_drivers , data))

            with self.connection.cursor() as curs:
                insert_query = 'insert into Technician (eID, truckType) values %s'
                pg_extras.execute_values (curs, insert_query, data)
            
            return len(data)
        except pg.Error as ex:
            raise ex
            return 0

    def workmate_sphere(self, eid: int) -> list[int]:
        """Return the workmate sphere of the driver identified by <eid>, as a
        list of eIDs.

        The workmate sphere of <eid> is:
            * Any employee who has been on a trip with <eid>.
            * Recursively, any employee who has been on a trip with an employee
              in <eid>'s workmate sphere is also in <eid>'s workmate sphere.

        The returned list should NOT include <eid> and should NOT include
        duplicates.

        The order of the returned ids does NOT matter.

        Your method should NOT return an error. If an error occurs, your method
        should simply return an empty list.
        """
        def get_partners_of_given_eID(all_eID_pairs, eID):
            pairs_of_given_eID = list(filter(lambda e: e[0]==eID or e[1]==eID , all_eID_pairs))
            partners = set()
            for eID_pair in pairs_of_given_eID:
                eID1, eID2 = eID_pair
                other_eID = eID2 if eID1==eID else eID1
                partners.add(other_eID)
            
            return partners

        try:
            all_drivers = get_table(self.connection, "Driver")
            all_drivers = set([e[0] for e in all_drivers])
            if eid not in all_drivers: return []

            all_eID_pairs = set()
            with self.connection.cursor() as curs:
                curs.execute("SELECT eID1, eID2 FROM %s WHERE eID1=%d OR eID2=%d" % ("Trip", eid, eid))
                for eID_pair in curs:
                    all_eID_pairs.add(tuple(eID_pair))
            all_eID_pairs = list(all_eID_pairs)

            input_eID = set([eid])
            workmates = set([])
            eIDs_to_check = get_partners_of_given_eID(all_eID_pairs, eid)
            while len(eIDs_to_check):
                eID = eIDs_to_check.pop()
                workmates.add(eID)
                partners_of_eID = get_partners_of_given_eID(all_eID_pairs, eID)
                partners_of_eID.difference_update(workmates, input_eID)
                eIDs_to_check.update(partners_of_eID)

            return list(workmates)
        except pg.Error as ex:
            raise ex
            return []

    def schedule_maintenance(self, date: dt.date) -> int:
        """For each truck whose most recent maintenance before <date> happened
        over 90 days before <date>, and for which there is no scheduled
        maintenance up to 10 days following date, schedule maintenance with
        a technician qualified to work on that truck in ascending order of tIDs.

        For example, if <date> is 2023-05-02, then you should consider trucks
        that had maintenance before 2023-02-01, and for which there is no
        scheduled maintenance from 2023-05-02 to 2023-05-12 inclusive.

        Choose the first day after <date> when there is a qualified technician
        available (not scheduled to maintain another truck that day) and the
        truck is not scheduled for a trip or maintenance on that day.

        If there is more than one technician available on a given day, choose
        the one with the lowest eID.

        Return the number of trucks that were successfully scheduled for
        maintenance.

        Your method should NOT throw an error.

        While a realistic use case will provide a <date> in the near future, our
        tests could use any valid value for <date>.
        """
        try:
            # TODO: implement this method
            pass
        except pg.Error as ex:
            # You may find it helpful to uncomment this line while debugging,
            # as it will show you all the details of the error that occurred:
            # raise ex
            return 0

    def reroute_waste(self, fid: int, date: dt.date) -> int:
        """Reroute the trips to <fid> on day <date> to another facility that
        takes the same type of waste. If there are many such facilities, pick
        the one with the smallest fID (that is not <fid>).

        Return the number of re-routed trips.

        Don't worry about too many trips arriving at the same time to the same
        facility. Each facility has ample receiving facility.

        Your method should NOT return an error. If an error occurs, your method
        should simply return 0 i.e., no trips have been re-routed.

        While a realistic use case will provide a <date> in the near future, our
        tests could use any valid value for <date>.

        Assume this happens before any of the trips have reached <fid>.
        """
        try:
            # TODO: implement this method
            pass
        except pg.Error as ex:
            # You may find it helpful to uncomment this line while debugging,
            # as it will show you all the details of the error that occurred:
            # raise ex
            return 0

    # =========================== Helper methods ============================= #

    @staticmethod
    def _read_qualifications_file(file: TextIO) -> list[list[str, str, str]]:
        """Helper for update_technicians. Accept an open file <file> that
        follows the format described on the A2 handout and return a list
        representing the information in the file, where each item in the list
        includes the following 3 elements in this order:
            * The first name of the technician.
            * The last name of the technician.
            * The truck type that the technician is currently qualified to work
              on.

        Pre-condition:
            <file> follows the format given on the A2 handout.
        """
        result = []
        employee_info = []
        for idx, line in enumerate(file):
            if idx % 2 == 0:
                info = line.strip().split(' ')[-2:]
                fname, lname = info
                employee_info.extend([fname, lname])
            else:
                employee_info.append(line.strip())
                result.append(employee_info)
                employee_info = []

        return result


def setup(dbname: str, username: str, password: str, file_path: str) -> None:
    """Set up the testing environment for the database <dbname> using the
    username <username> and password <password> by importing the schema file
    and the file containing the data at <file_path>.
    """
    connection, cursor, schema_file, data_file = None, None, None, None
    try:
        # Change this to connect to your own database
        connection = pg.connect(
            dbname=dbname, user=username, password=password,
            options="-c search_path=waste_wrangler"
        )
        cursor = connection.cursor()

        schema_file = open("./waste_wrangler_schema.sql", "r")
        cursor.execute(schema_file.read())

        data_file = open(file_path, "r")
        cursor.execute(data_file.read())

        connection.commit()
    except Exception as ex:
        connection.rollback()
        raise Exception(f"Couldn't set up environment for tests: \n{ex}")
    finally:
        if cursor and not cursor.closed:
            cursor.close()
        if connection and not connection.closed:
            connection.close()
        if schema_file:
            schema_file.close()
        if data_file:
            data_file.close()


def test_preliminary() -> None:
    """Test preliminary aspects of the A2 methods."""
    ww = WasteWrangler()
    qf = None
    try:
        # TODO: Change the values of the following variables to connect to your
        #  own database:
        dbname = 'csc343h-desaihi2'
        user = ''
        password = ''

        connected = ww.connect(dbname, user, password)

        # The following is an assert statement. It checks that the value for
        # connected is True. The message after the comma will be printed if
        # that is not the case (connected is False).
        # Use the same notation to thoroughly test the methods we have provided
        assert connected, f"[Connected] Expected True | Got {connected}."

        # TODO: Test one or more methods here, or better yet, make more testing
        setup(dbname, user, password, './waste_wrangler_data.sql')
        '''
        # --------------------- Testing schedule_trip  ------------------------#
        # You will need to check that data in the Trip relation has been
        # changed accordingly. The following row would now be added:
        # (1, 1, '2023-05-04 08:00', null, 2, 1, 1)
        scheduled_trip = ww.schedule_trip(1, dt.datetime(2023, 5, 4, 8, 0))
        # assert scheduled_trip, \
        #     f"[Schedule Trip] Expected True, Got {scheduled_trip}"

        # # Can't schedule the same route of the same day.
        # scheduled_trip = ww.schedule_trip(1, dt.datetime(2023, 5, 4, 13, 0))
        # assert not scheduled_trip, \
        #     f"[Schedule Trip] Expected False, Got {scheduled_trip}"
        '''
        # -------------------- Testing schedule_trips  ------------------------#

        # All routes for truck tid are scheduled on that day
        scheduled_trips = ww.schedule_trips(8, dt.datetime(2023, 5, 3))
        assert scheduled_trips == 1, \
            f"[Schedule Trips] Expected 0, Got {scheduled_trips}"
        # scheduled_trips = ww.schedule_trips(1, dt.datetime(2023, 5, 3))
        # assert scheduled_trips == 0, \
        #     f"[Schedule Trips] Expected 0, Got {scheduled_trips}"
        '''
        # ----------------- Testing update_technicians  -----------------------#

        # This uses the provided file. We recommend you make up your custom
        # file to thoroughly test your implementation.
        # You will need to check that data in the Technician relation has been
        # changed accordingly
        qf = open('qualifications.txt', 'r')
        updated_technicians = ww.update_technicians(qf)
        assert updated_technicians == 2, \
            f"[Update Technicians] Expected 2, Got {updated_technicians}"

        # ----------------- Testing workmate_sphere ---------------------------#
        # This employee doesn't exist in our instance
        workmate_sphere = ww.workmate_sphere(2023)
        assert len(workmate_sphere) == 0, \
            f"[Workmate Sphere] Expected [], Got {workmate_sphere}"

        workmate_sphere = ww.workmate_sphere(3)
        # Use set for comparing the results of workmate_sphere since
        # order doesn't matter.
        # Notice that 2 is added to 1's work sphere because of the trip we
        # added earlier.
        assert set(workmate_sphere) == {1, 2}, \
            f"[Workmate Sphere] Expected {{1, 2}}, Got {workmate_sphere}"

        # ----------------- Testing schedule_maintenance ----------------------#
        # You will need to check the data in the Maintenance relation
        scheduled_maintenance = ww.schedule_maintenance(dt.date(2023, 5, 5))
        assert scheduled_maintenance == 7, \
            f"[Schedule Maintenance] Expected 7, Got {scheduled_maintenance}"

        # ------------------ Testing reroute_waste  ---------------------------#

        # There is no trips to facility 1 on that day
        reroute_waste = ww.reroute_waste(1, dt.date(2023, 5, 10))
        assert reroute_waste == 0, \
            f"[Reroute Waste] Expected 0. Got {reroute_waste}"

        # You will need to check that data in the Trip relation has been
        # changed accordingly
        reroute_waste = ww.reroute_waste(1, dt.date(2023, 5, 3))
        assert reroute_waste == 1, \
            f"[Reroute Waste] Expected 1. Got {reroute_waste}"
        ''' 
    finally:
        if qf and not qf.closed:
            qf.close()



            
        ww.disconnect()


if __name__ == '__main__':
    # Un comment-out the next two lines if you would like to run the doctest
    # examples (see ">>>" in the methods connect and disconnect)
    # import doctest
    # doctest.testmod()

    # TODO: Put your testing code here, or call testing functions such as
    #   this one:
    test_preliminary()